#MySql

#데이터 베이스 생성
create database dokky;

#데이터 베이스 사용
use database dokky;

#회원테이블 생성
create table member_tb(
	mem_id varchar(50),
	mem_pw varchar(50),
	mem_email varchar(100),
	mem_name varchar(50),
	mem_nickname varchar(50),
	mem_image varchar(200),
	mem_exp int,
	mem_date timestamp default current_timestamp,
	primary key(mem_id),
	constraint mem_email_un unique(mem_email),
	constraint mem_nickname_un unique(mem_nickname)
);

#sequence 테이블 생성
create table sequence(
      id int not null, 
      seq_name varchar(50) not null
);

#sequence테이블을 증가시킬 함수 생성
DROP FUNCTION IF EXISTS get_seq;
delimiter $$

create function get_seq(seq_name varchar(50))
returns int reads sql database

begin

	declare result_id int;
	update sequence set id = last_insert_id(id+1)
	where seq_name = seq_name;
	set result_id = (select last_insert_id());
	
	return result_id;
end $$
delimiter;

#board쪽 sequence 생성
insert into sequence values(1, 'board_seq');

#comment쪽 sequence 생성
insert into sequence values(500000, 'comment_seq);

#like, scrap쪽 sequence 생성
insert into sequence values(1000000, 'likrap_seq);

#category테이블 생성
create table category_tb(
	category_1 varchar(50) unique,
	category_2 varchar(50)
);

#category데이터 추가
insert into category_tb values('qna', '프로그래밍');
insert into category_tb values('tech', '프로그래밍');
insert into category_tb values('comm', 'blog');
insert into category_tb values('jobs', '프로그래머');

#basic_board테이블 생성
create table basic_board_tb(
	basic_board_no int,
	basic_board_category_1 varchar(50),
	basic_board_category_2 varchar(50),
	basic_board_title varchar(100),
	basic_board_writer varchar(50),
	basic_board_tags varchar(150),
	basic_board_content varchar(3003),
	basic_board_like_cnt int,
	basic_board_date timestamp default current_timestamp,
	basic_board_scrap_cnt int,
	primary key(basic_board_no),
	constraint basic_board_writer_fk foreign key(basic_board_writer)
	references member_td(mem_id) on delete cascade
);

#basic_comment테이블 생성
create table basic_comment_tb(
	basic_comment_no int,
	basic_board_no int,
	basic_comment_like_cnt int,
	basic_comment_content varchar(3003),
	basic_comment_writer varchar(50),
	basic_comment_date timestamp default current_timestamp,
	primary key(basic_comment_no),
	constraint basic_board_no_fk foreign key(basic_board_no)
	references basic_board(basic_board_no) on delete cascade,
	constraint basic_comment_writer_fk foreign key(basic_comment_writer)
	references member_td(mem_id) on delete cascade
);

#qna_board테이블 생성
create table qna_board_tb(
	qna_board_no int,
	qna_board_category_1 varchar(50),
	qna_board_category_2 varchar(50),
	qna_board_title varchar(100),
	qna_board_writer varchar(50),
	qna_board_tags varchar(150),
	qna_board_content varchar(3003),
	qna_board_like_cnt int,
	qna_board_date timestamp default current_timestamp,
	qna_board_scrap_cnt int,
	primary key(qna_board_no),
	constraint qna_board_writer_fk foreign key(qna_board_writer)
	references member_td(mem_id) on delete cascade
);

#qna_comment테이블 생성
create table qna_comment_tb(
	qna_comment_no int,
	qna_board_no int,
	qna_comment_like_cnt int,
	qna_comment_content varchar(3003),
	qna_comment_writer varchar(50),
	qna_comment_date timestamp default current_timestamp,
	qna_comment_select int(1) default 0,
	primary key(qna_comment_no),
	constraint qna_board_no_fk foreign key(qna_board_no)
	references qna_board(basic_board_no) on delete cascade,
	constraint qna_comment_writer_fk foreign key(qna_comment_writer)
	references member_td(mem_id) on delete cascade
);

#board_like테이블 생성
create table board_like_tb(
	board_like_no int,
	board_no int,
	mem_id varchar(50),
	board_like_date timestamp default current_timestamp,
	primary key(board_like_no),
	constraint basic_board_no_like_fk foreign key(board_no)
	references basic_board(basic_board_no) on delete cascade,
	constraint qna_board_no_like_fk foreign key(board_no)
	references qna_board(qna_board_no) on delete cascade,
	constraint mem_id_board_like_fk foreign key(mem_id)
	references member_td(mem_id) on delete cascade
);

#board_scrap테이블 생성
create table board_scrap_tb(
	board_scrap_no int,
	board_no int,
	mem_id varchar(50),
	board_scrap_date timestamp default current_timestamp,
	primary key(board_scrap_no),
	onstraint basic_board_no_scrap_fk foreign key(board_no)
	references basic_board(basic_board_no) on delete cascade,
	constraint qna_board_no_scrap_fk foreign key(board_no)
	references qna_board(qna_board_no) on delete cascade,
	constraint mem_id_board_scrap_fk foreign key(mem_id)
	references member_td(mem_id) on delete cascade
)

#comment_like테이블 생성
create table comment_like_tb(
	comment_like_no int,
	comment_no int,
	mem_id varchar(50),
	comment_like_date timestamp default current_timestamp,
	primary key(comment_like_no),
	constraint basic_comment_no_like_fk foreign key(comment_no)
	references basic_comment(basic_comment_no) on delete cascade,
	constraint qna_comment_no_like_fk foreign key(comment_no)
	references qna_comment(qna_comment_no) on delete cascade,
	constraint mem_id_comment_like_fk foreign key(mem_id)
	references member_td(mem_id) on delete cascade
);

commit;